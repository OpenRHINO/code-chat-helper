import os
import hmac
import hashlib
from time import sleep
import openai
from github import Github


def preprocess_changes(changes_str):
    lines = changes_str.split('\n')
    processed_lines = []
    for line in lines:
        if line.startswith('+'):
            processed_lines.append(f'(+) {line[1:]}')
        elif line.startswith('-'):
            processed_lines.append(f'(-) {line[1:]}')
        else:
            processed_lines.append(line)
    return '\n'.join(processed_lines)


# Set up OpenAI API client
openai.api_key = os.environ.get("OPENAI_API_KEY")
# Set up GitHub API client
gh = Github(os.environ.get("GITHUB_TOKEN"))

# Get the code changes from the PR
gh_repo = gh.get_repo("OpenRHINO/RHINO-Operator")
gh_pr = gh_repo.get_pull(37)
code_changes = gh_pr.get_files()

# Concatenate the changes into a single string
changes_str = "Title: " + gh_pr.title + "\n"
if gh_pr.body is not None:
    changes_str += "Body: " + gh_pr.body + "\n"
for change in code_changes:
    changes_str += f"File: {change.filename}\nPatch:\n{change.patch}\n\n"
changes_str = preprocess_changes(changes_str)
print(changes_str)

# Call GPT to get the review result
messages = [
    {
        "role": "system",
        "content": "As an AI assistant with programming expertise, you are a meticulous code reviewer."},
    {"role": "user",
        "content": f"Review the following pull request:\n{changes_str}"}
]
response = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=messages,
    max_tokens=300,
    temperature=0.5,
    n=3
)

# Create a list of reviews from the response by "gp-3.5-turbo"
reviews = [
    f"Review {i+1}:\n{response.choices[i]['message']['content'].strip()}\n" for i in range(len(response.choices))]

# Combine the reviews into a single string
reviews_str = "\n".join(reviews)
print(reviews_str)
# Call GPT to generate the summary of the reviews
summary_messages = [
    {
        "role": "system",
        "content": "The template:\n\n**[Changes]**\n\n**[Suggestions]**\n\n**[Conclusion]**\n\n**[Action]**\n\n**[Other]**\n\n"},
        {"role": "assistant",
         "content": f"Here are some review results for reference\n{reviews_str}"},
    {"role": "user",
#        "content": f"Review the PR\n{changes_str}\n\nMake sure to use the template provided by the system, and indicate in the 'Suggestions' section which ones you referred to from existing review results and which ones you proposed yourself."}
         "content": f"Review the PR\n{changes_str}\n\nUse the template provided by the system."}
]

summary_response = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=summary_messages,
    max_tokens=500,
    temperature=0.2,
    n=1
)

review = f"**[AI Review]** This comment is generated by an AI model (gpt-3.5-turbo).\n\n{summary_response.choices[0]['message']['content'].strip()}\n\n**[Note]** The above AI review results are for reference only, please rely on human expert review results for the final conclusion.\n"

# Print the final review result
print(review)
# response = openai.Completion.create(
#     engine="text-davinci-003",
#     prompt=f"请帮忙评审一个PR:\n{changes_str}",
#     max_tokens=300,
#     n=2,
#     stop=None,
#     temperature=0.1,
# )
# review = f"**[AI Review]** This comment is generated by an AI model (text-davinci-003).\n\n{response.choices[0].text.strip()}"
# print(review)
# print("\n")
##### text-davinci-003 经常得到不完整的输出 #####
# sleep(5)

