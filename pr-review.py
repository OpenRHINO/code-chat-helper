import os
import hmac
import hashlib
import openai
from flask import Flask, request, abort
from github import Github

app = Flask(__name__)

# Set up OpenAI API client
openai.api_key = os.environ.get("OPENAI_API_KEY")

# Set up GitHub API client
gh = Github(os.environ.get("GITHUB_TOKEN"))

# Set up webhook secret
webhook_secret = os.environ.get("WEBHOOK_SECRET")


def preprocess_changes(changes_str):
    lines = changes_str.split('\n')
    processed_lines = []
    for line in lines:
        if line.startswith('+'):
            processed_lines.append(f'(+) {line[1:]}')
        elif line.startswith('-'):
            processed_lines.append(f'(-) {line[1:]}')
        else:
            processed_lines.append(line)
    return '\n'.join(processed_lines)

def validate_signature(request):
    signature = request.headers.get('X-Hub-Signature-256')
    if signature is None:
        return False

    sha_name, signature = signature.split('=')
    if sha_name != 'sha256':
        return False

    mac = hmac.new(webhook_secret.encode(), msg=request.data,
                   digestmod=hashlib.sha256)
    return hmac.compare_digest(mac.hexdigest(), signature)


@app.route('/review_pr', methods=['POST'])
def review_pr():
    if not validate_signature(request):
        abort(401, 'Invalid signature')

    event = request.get_json()

    if event['action'] not in ['opened', 'synchronize', 'reopened']:
        return 'Ignoring non-PR opening/synchronize/reopening events', 200

    pr = event['pull_request']
    repo = event['repository']

    # Get the code changes from the PR
    gh_repo = gh.get_repo(repo['full_name'])
    gh_pr = gh_repo.get_pull(pr['number'])
    code_changes = gh_pr.get_files()

    # Concatenate the changes into a single string
    changes_str = ""
    for change in code_changes:
        changes_str += f"File: {change.filename}\nPatch:\n{change.patch}\n\n"

    # Call GPT to get the review result
    messages = [
        {"role": "system", "content": "You are a helpful assistant that can review pull requests."},
        {"role": "user",
            "content": f"Review the following Pull Request: {pr['title']} - {pr['body']} \n\nCode changes:\n{changes_str}"}
    ]
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        max_tokens=300,
        temperature=0.5,
    )

    review = f"**[AI Review]** This comment is generated by an AI model (GPT-3.5-turbo).\n\n{response.choices[0]['message']['content'].strip()}"

    # Post the GPT result as a PR comment
    gh_pr.create_issue_comment(review)

    return 'Review submitted', 200


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
